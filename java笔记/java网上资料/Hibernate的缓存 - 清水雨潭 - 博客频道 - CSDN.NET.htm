<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0051)http://blog.csdn.net/accpsz/article/details/2458791 -->
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET</title>

<meta name="description" content="14.2.1    什么是缓存       缓存是介于应用程序和物理数据之间的，其作用是为了降低应用程序对物理数据访问的频次从而提高应用系统的性能。缓存思想的提出主要是因为对物理数据的访问效率要远远低于对内存的访问速度，因而采用了将部分物理数据存放于内存当中，这样可以有效地减少对物理数据的访问次数，从而提高系统的性能。       缓存广泛地存在于我们所接触的各种应用系统中，例如数据库系统">
<script type="text/javascript" async="" src="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/ga.js"></script><script src="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/jquery.js" type="text/javascript"></script>
<script src="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/plugins.js" type="text/javascript"></script>
<script src="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/common.js" type="text/javascript"></script>
<script type="text/javascript" src="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/ad.js"></script>
<link rel="Stylesheet" type="text/css" href="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/style.css">
<link id="RSSLink" title="RSS" type="application/rss+xml" rel="alternate" href="http://blog.csdn.net/accpsz/rss/list">
<link rel="shortcut icon" href="http://blog.csdn.net/favicon.ico">
<link type="text/css" rel="stylesheet" href="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/default.css">
</head>
<body>
<script src="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/pub_topnav_2011.js" type="text/javascript"></script><link rel="stylesheet" type="text/css" href="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/navtop_2012.css">
<div class="nav_top_2011">
<p><span style="color:red;">您还未登录！</span>|<a href="https://passport.csdn.net/account/login" target="_top">登录</a>|<a href="https://passport.csdn.net/account/register" target="_top">注册</a>|<a href="https://passport.csdn.net/help/faq" target="_blank">帮助</a></p><ul>
<li><a href="http://www.csdn.net/" target="_blank">首页</a></li>
<li><a href="http://news.csdn.net/" target="_blank">业界</a></li>
<li><a href="http://mobile.csdn.net/" target="_blank">移动</a></li>
<li><a href="http://cloud.csdn.net/" target="_blank">云计算</a></li>
<li><a href="http://sd.csdn.net/" target="_blank">研发</a></li>
<li><a href="http://bbs.csdn.net/" target="_blank">论坛</a></li>
<li><a href="http://blog.csdn.net/" target="_blank">博客</a></li>
<li><a href="http://download.csdn.net/" target="_blank">下载</a></li>
<li class="more"><h2 id="topnav_btnmore" onclick="showNavMore(this)"><a href="javascript:void(0);">更多</a></h2>
<div id="topnav_hidlist">
<iframe name="nav_frm" src="about:blank" width="92" height="178" scrolling="no" frameborder="no"></iframe>
</div>
</li>
</ul>
</div>


<div id="container">
<div id="header">
    <div class="header">
        <div id="blog_title">
            <h1><a href="http://blog.csdn.net/accpsz">清水雨潭</a></h1>
            <h2></h2>
            <div class="clear"></div>
        </div>
        <div class="clear"></div>
    </div>
</div>
<div id="navigator">
    <div class="navigator_bg"></div>
    <div class="navigator">
        <ul>
            <li id="btnContents"><a href="http://blog.csdn.net/accpsz?viewmode=contents"><span><img src="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/ico_list.gif">目录视图</span></a></li>
            <li id="btnView"><a href="http://blog.csdn.net/accpsz?viewmode=list"><span><img src="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/ico_summary.gif">摘要视图</span></a></li>
            <li id="btnRss"><a href="http://blog.csdn.net/accpsz/rss/list"><span><img src="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/ico_rss.gif">订阅</span></a></li>
</ul>
    </div>
</div>
<script type="text/javascript">
    var username = "accpsz";
    var blog_address = "http://blog.csdn.net/accpsz";
    var static_host = "http://static.blog.csdn.net";
    var currentUserName = "";
</script>
        
<div id="body">
<div id="main">
<div class="main">
<div class="notice"> 

<a href="http://bbs.csdn.net/topics/390268376" target="_blank">
<font color="red">
CSDN论坛重写完毕，正式上线！ </font></a>

&nbsp;&nbsp;


<a href="http://hbtc2012.hadooper.cn/" target="_blank">
<font color="red"> Hadoop与大数据精彩议题发布</font></a>

&nbsp;&nbsp;&nbsp;


<a href="http://blog.csdn.net/zhangoi391/article/details/8161343" target="_blank">
<font color="red">2000元大奖征异构开发博文  </font></a>

<br>





<a href="http://blog.csdn.net/csdnproduct/article/details/8140597" target="_blank">
<font color="red">CSDN博客频道搬家功能改版正式上线！ </font></a>

&nbsp;&nbsp;

<a href="http://events.csdn.net/DR2012/roadshow/index.html" target="_blank">
<font color="red">【免费】解读海外市场营销奥秘   </font></a>

&nbsp;&nbsp;

<a href="http://blog.csdn.net/csdnproduct/article/details/8101993" target="_blank">
<font color="red">CSDN博客频道推出TAG功能  </font></a>

</div><div id="article_details" class="details">
    <div class="article_title">
    <span class="ico ico_type_Repost"></span>
    <h3>
        <span class="link_title"><a href="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET.htm">
        Hibernate的缓存
        </a></span>
    </h3>
</div>

        
    <div class="article_manage">
        <span class="link_categories">
        分类：
            <a href="http://blog.csdn.net/accpsz/article/category/244697">hibernate学习</a> 
        </span>
    <span class="link_postdate">2008-05-19 16:48</span>
    <span class="link_view" title="阅读次数">370人阅读</span>
    <span class="link_comments" title="评论次数"><a href="http://blog.csdn.net/accpsz/article/details/2458791#comments">评论</a>(0)</span>
    <span class="link_collect"><a href="javascript:void(0);" onclick="javascript:collectArticle(&#39;Hibernate的缓存&#39;,&#39;2458791&#39;);return false;" title="收藏">收藏</a></span>
    <span class="link_report"><a href="http://blog.csdn.net/accpsz/article/details/2458791#report" onclick="javascript:report(2458791,2);return false;" title="举报">举报</a></span>
    
</div>


    
<div id="article_content" class="article_content">
<div><strong><font size="4">14.2.1&nbsp;&nbsp;&nbsp; 什么是缓存</font></strong></div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 缓存是介于应用程序和物理数据之间的，其作用是为了降低应用程序对物理数据访问的频次从而提高应用系统的性能。缓存思想的提出主要是因为对物理数据的访问效率要远远低于对内存的访问速度，因而采用了将部分物理数据存放于内存当中，这样可以有效地减少对物理数据的访问次数，从而提高系统的性能。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 缓存广泛地存在于我们所接触的各种应用系统中，例如数据库系统、Windows操作系统等，在进行物理数据的访问时无一例外地都使用了缓存机制来提高操作的性能。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 缓存内的数据是对物理数据的复制，因此一个缓存系统所应该包括的最基本的功能是数据的缓存和读取，同时在使用缓存的时候还要考虑缓存中的数据与物理数据的同步，也就是要保持两者是一致的。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 缓存要求对数据的读写速度很高，因此，一般情况下会选用内存作为存储的介质。但如果内存有限，并且缓存中存放的数据量非常大时，也会用硬盘作为缓存介质。缓存的实现不仅仅要考虑存储的介质，还要考虑到管理缓存的并发访问和缓存数据的生命周期。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 为了提高系统的性能，Hibernate也使用了缓存的机制。在Hibernate框架中，主要包括以下两个方面的缓存：一级缓存和二级缓存（包含查询缓存）。Hibernate中缓存的作用主要表现在以下两个方面：</div>
<div style="MARGIN-LEFT: 42pt; TEXT-INDENT: -21pt">●&nbsp;&nbsp; 通过主键（ID）加载数据的时候</div>
<div style="MARGIN-LEFT: 42pt; TEXT-INDENT: -21pt">●&nbsp;&nbsp; 延迟加载中</div>
<div style="MARGIN-LEFT: 42pt; TEXT-INDENT: -21pt">
<div><strong><font size="4">14.2.2&nbsp;&nbsp;&nbsp; 一级缓存</font></strong></div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hibernate的一级缓存是由Session提供的，因此它只存在于Session的生命周期中，也就是当Session关闭的时候该Session所管理的一级缓存也会立即被清除。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hibernate的一级缓存是Session所内置的，不能被卸载，也不能进行任何配置。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 一级缓存采用的是key-value的Map方式来实现的，在缓存实体对象时，对象的主关键字ID是Map的key，实体对象就是对应的值。所以说，一级缓存是以实体对象为单位进行存储的，在访问的时候使用的是主关键字ID。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 虽然，Hibernate对一级缓存使用的是自动维护的功能，没有提供任何配置功能，但是可以通过Session中所提供的方法来对一级缓存的管理进行手工干预。Session中所提供的干预方法包括以下两种。</div>
<div style="MARGIN-LEFT: 42pt; TEXT-INDENT: -21pt">●&nbsp;&nbsp; evict() ：用于将某个对象从Session的一级缓存中清除。</div>
<div style="MARGIN-LEFT: 42pt; TEXT-INDENT: -21pt">●&nbsp;&nbsp; clear() ：用于将一级缓存中的对象全部清除。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在进行大批量数据一次性更新的时候，会占用非常多的内存来缓存被更新的对象。这时就应该阶段性地调用clear()方法来清空一级缓存中的对象，控制一级缓存的大小，以避免产生内存溢出的情况。具体的实现方法如清单14.8所示。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 清单14.8&nbsp;&nbsp;&nbsp; 大批量更新时缓存的处理方法</div>
<div>Session session = sessionFactory.openSession();</div>
<div>Transaction tx = session.beginTransaction();</div>
<div>&nbsp;&nbsp; </div>
<div>for ( int i=0; i&lt;100000; i++ ) {</div>
<div>&nbsp;&nbsp;&nbsp; Customer customer = new Customer(……);</div>
<div>&nbsp;&nbsp;&nbsp; session.save(customer);</div>
<div>&nbsp;&nbsp;&nbsp; if ( i % 20 == 0 ) { </div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //将本批插入的对象立即写入数据库并释放内存</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; session.flush();</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; session.clear();</div>
<div>&nbsp;&nbsp;&nbsp; }</div>
<div>}</div>
<div>&nbsp;&nbsp; </div>
<div>tx.commit();</div>
<div>session.close();</div>
<div>
<div><strong><font size="4">14.2.3&nbsp;&nbsp;&nbsp; 二级缓存</font></strong></div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 与Session相对的是，SessionFactory也提供了相应的缓存机制。SessionFactory缓存可以依据功能和目的的不同而划分为内置缓存和外置缓存。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SessionFactory的内置缓存中存放了映射元数据和预定义SQL语句，映射元数据是映射文件中数据的副本，而预定义SQL语句是在Hibernate初始化阶段根据映射元数据推导出来的。SessionFactory的内置缓存是只读的，应用程序不能修改缓存中的映射元数据和预定义SQL语句，因此SessionFactory不需要进行内置缓存与映射文件的同步。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SessionFactory的外置缓存是一个可配置的插件。在默认情况下，SessionFactory不会启用这个插件。外置缓存的数据是数据库数据的副本，外置缓存的介质可以是内存或者硬盘。SessionFactory的外置缓存也被称为Hibernate的二级缓存。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hibernate的二级缓存的实现原理与一级缓存是一样的，也是通过以ID为key的Map来实现对对象的缓存。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 由于Hibernate的二级缓存是作用在SessionFactory范围内的，因而它比一级缓存的范围更广，可以被所有的Session对象所共享。</div>
<div><strong><font size="3">14.2.3.1&nbsp;&nbsp;&nbsp; 二级缓存的工作内容</font></strong></div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hibernate的二级缓存同一级缓存一样，也是针对对象ID来进行缓存。所以说，二级缓存的作用范围是针对根据ID获得对象的查询。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 二级缓存的工作可以概括为以下几个部分：</div>
<div style="MARGIN-LEFT: 42pt; TEXT-INDENT: -21pt">●&nbsp;&nbsp; 在执行各种条件查询时，如果所获得的结果集为实体对象的集合，那么就会把所有的数据对象根据ID放入到二级缓存中。</div>
<div style="MARGIN-LEFT: 42pt; TEXT-INDENT: -21pt">●&nbsp;&nbsp; 当Hibernate根据ID访问数据对象的时候，首先会从Session一级缓存中查找，如果查不到并且配置了二级缓存，那么会从二级缓存中查找，如果还查不到，就会查询数据库，把结果按照ID放入到缓存中。</div>
<div style="MARGIN-LEFT: 42pt; TEXT-INDENT: -21pt">●&nbsp;&nbsp; 删除、更新、增加数据的时候，同时更新缓存。</div>
<div><strong><font size="3">14.2.3.2&nbsp;&nbsp;&nbsp; 二级缓存的适用范围</font></strong></div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hibernate的二级缓存作为一个可插入的组件在使用的时候也是可以进行配置的，但并不是所有的对象都适合放在二级缓存中。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在通常情况下会将具有以下特征的数据放入到二级缓存中：</div>
<div style="MARGIN-LEFT: 42pt; TEXT-INDENT: -21pt">●&nbsp;&nbsp; 很少被修改的数据。</div>
<div style="MARGIN-LEFT: 42pt; TEXT-INDENT: -21pt">●&nbsp;&nbsp; 不是很重要的数据，允许出现偶尔并发的数据。</div>
<div style="MARGIN-LEFT: 42pt; TEXT-INDENT: -21pt">●&nbsp;&nbsp; 不会被并发访问的数据。</div>
<div style="MARGIN-LEFT: 42pt; TEXT-INDENT: -21pt">●&nbsp;&nbsp; 参考数据。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 而对于具有以下特征的数据则不适合放在二级缓存中：</div>
<div style="MARGIN-LEFT: 42pt; TEXT-INDENT: -21pt">●&nbsp;&nbsp; 经常被修改的数据。</div>
<div style="MARGIN-LEFT: 42pt; TEXT-INDENT: -21pt">●&nbsp;&nbsp; 财务数据，绝对不允许出现并发。</div>
<div style="MARGIN-LEFT: 42pt; TEXT-INDENT: -21pt">●&nbsp;&nbsp; 与其他应用共享的数据。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在这里特别要注意的是对放入缓存中的数据不能有第三方的应用对数据进行更改（其中也包括在自己程序中使用其他方式进行数据的修改，例如，JDBC），因为那样Hibernate将不会知道数据已经被修改，也就无法保证缓存中的数据与数据库中数据的一致性。</div>
<div><strong><font size="3">14.2.3.3&nbsp;&nbsp;&nbsp; 二级缓存组件</font></strong></div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在默认情况下，Hibernate会使用EHCache作为二级缓存组件。但是，可以通过设置hibernate.cache.provider_class属性，指定其他的缓存策略，该缓存策略必须实现org.hibernate.cache.CacheProvider接口。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 通过实现org.hibernate.cache.CacheProvider接口可以提供对不同二级缓存组件的支持。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hibernate内置支持的二级缓存组件如表14.1所示。</div>
<div align="center">表14.1&nbsp;&nbsp;&nbsp; Hibernate所支持的二级缓存组件</div>
<table style="BORDER-TOP-STYLE: none; BORDER-RIGHT-STYLE: none; BORDER-LEFT-STYLE: none; BORDER-COLLAPSE: collapse; BORDER-BOTTOM-STYLE: none" cellspacing="0" cellpadding="0" border="1">
    <tbody>
        <tr>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: windowtext 1pt solid; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: windowtext 1pt solid; WIDTH: 85.2pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" valign="top" width="114">
            <div>组件</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: windowtext 1pt solid; PADDING-LEFT: 5.4pt; BORDER-LEFT-WIDTH: 1pt; BORDER-LEFT-COLOR: windowtext; PADDING-BOTTOM: 0cm; WIDTH: 85.2pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" valign="top" width="114">
            <div>Provider类</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: windowtext 1pt solid; PADDING-LEFT: 5.4pt; BORDER-LEFT-WIDTH: 1pt; BORDER-LEFT-COLOR: windowtext; PADDING-BOTTOM: 0cm; WIDTH: 85.2pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" valign="top" width="114">
            <div>类型</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: windowtext 1pt solid; PADDING-LEFT: 5.4pt; BORDER-LEFT-WIDTH: 1pt; BORDER-LEFT-COLOR: windowtext; PADDING-BOTTOM: 0cm; WIDTH: 85.25pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" valign="top" width="114">
            <div>集群</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: windowtext 1pt solid; PADDING-LEFT: 5.4pt; BORDER-LEFT-WIDTH: 1pt; BORDER-LEFT-COLOR: windowtext; PADDING-BOTTOM: 0cm; WIDTH: 85.25pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" valign="top" width="114">
            <div>查询缓存</div>
            </td>
        </tr>
        <tr>
            <td style="BORDER-TOP-WIDTH: 1pt; BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: windowtext 1pt solid; WIDTH: 85.2pt; BORDER-TOP-COLOR: windowtext; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" valign="top" width="114">
            <div>Hashtable</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; WIDTH: 85.2pt; BORDER-TOP-STYLE: none; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT-STYLE: none" valign="top" width="114">
            <div>org.hibernate.cache.HashtableCacheProvider</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; WIDTH: 85.2pt; BORDER-TOP-STYLE: none; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT-STYLE: none" valign="top" width="114">
            <div>内存</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; WIDTH: 85.25pt; BORDER-TOP-STYLE: none; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT-STYLE: none" valign="top" width="114">
            <div>不支持</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; WIDTH: 85.25pt; BORDER-TOP-STYLE: none; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT-STYLE: none" valign="top" width="114">
            <div>支持</div>
            </td>
        </tr>
        <tr>
            <td style="BORDER-TOP-WIDTH: 1pt; BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: windowtext 1pt solid; WIDTH: 85.2pt; BORDER-TOP-COLOR: windowtext; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" valign="top" width="114">
            <div>EHCache</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; WIDTH: 85.2pt; BORDER-TOP-STYLE: none; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT-STYLE: none" valign="top" width="114">
            <div>org.hibernate.cache.EhCacheProvider</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; WIDTH: 85.2pt; BORDER-TOP-STYLE: none; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT-STYLE: none" valign="top" width="114">
            <div>内存，硬盘</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; WIDTH: 85.25pt; BORDER-TOP-STYLE: none; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT-STYLE: none" valign="top" width="114">
            <div>不支持</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; WIDTH: 85.25pt; BORDER-TOP-STYLE: none; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT-STYLE: none" valign="top" width="114">
            <div>支持</div>
            </td>
        </tr>
        <tr>
            <td style="BORDER-TOP-WIDTH: 1pt; BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: windowtext 1pt solid; WIDTH: 85.2pt; BORDER-TOP-COLOR: windowtext; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" valign="top" width="114">
            <div>OSCache</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; WIDTH: 85.2pt; BORDER-TOP-STYLE: none; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT-STYLE: none" valign="top" width="114">
            <div>org.hibernate.cache.OSCacheProvider</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; WIDTH: 85.2pt; BORDER-TOP-STYLE: none; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT-STYLE: none" valign="top" width="114">
            <div>内存，硬盘</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; WIDTH: 85.25pt; BORDER-TOP-STYLE: none; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT-STYLE: none" valign="top" width="114">
            <div>不支持</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; WIDTH: 85.25pt; BORDER-TOP-STYLE: none; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT-STYLE: none" valign="top" width="114">
            <div>支持</div>
            </td>
        </tr>
        <tr>
            <td style="BORDER-TOP-WIDTH: 1pt; BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: windowtext 1pt solid; WIDTH: 85.2pt; BORDER-TOP-COLOR: windowtext; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" valign="top" width="114">
            <div>SwarmCache</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; WIDTH: 85.2pt; BORDER-TOP-STYLE: none; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT-STYLE: none" valign="top" width="114">
            <div>org.hibernate.cache.SwarmCacheProvider</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; WIDTH: 85.2pt; BORDER-TOP-STYLE: none; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT-STYLE: none" valign="top" width="114">
            <div>集群</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; WIDTH: 85.25pt; BORDER-TOP-STYLE: none; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT-STYLE: none" valign="top" width="114">
            <div>支持</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; WIDTH: 85.25pt; BORDER-TOP-STYLE: none; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT-STYLE: none" valign="top" width="114">
            <div>不支持</div>
            </td>
        </tr>
        <tr>
            <td style="BORDER-TOP-WIDTH: 1pt; BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: windowtext 1pt solid; WIDTH: 85.2pt; BORDER-TOP-COLOR: windowtext; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" valign="top" width="114">
            <div>JBoss TreeCache</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; WIDTH: 85.2pt; BORDER-TOP-STYLE: none; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT-STYLE: none" valign="top" width="114">
            <div>org.hibernate.cache.TreeCacheProvider</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; WIDTH: 85.2pt; BORDER-TOP-STYLE: none; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT-STYLE: none" valign="top" width="114">
            <div>集群</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; WIDTH: 85.25pt; BORDER-TOP-STYLE: none; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT-STYLE: none" valign="top" width="114">
            <div>支持</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; WIDTH: 85.25pt; BORDER-TOP-STYLE: none; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT-STYLE: none" valign="top" width="114">
            <div>支持</div>
            </td>
        </tr>
    </tbody>
</table>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hibernate已经不再提供对JCS（Java Caching System）组件的支持了。</div>
<div><strong><font size="3">14.2.3.4&nbsp;&nbsp;&nbsp; 二级缓存的配置</font></strong></div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在使用Hibernate的二级缓存时，对于每个需要使用二级缓存的对象都需要进行相应的配置工作。也就是说，只有配置了使用二级缓存的对象才会被放置在二级缓存中。二级缓存是通过&lt;cache&gt;元素来进行配置的。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;cache&gt;元素的属性定义说明如下所示：</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;cache </div>
<div>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; usage="transactional|read-write|nonstrict-read-write|read-only"&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1)</div>
<div>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; region="RegionName"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (2)</div>
<div>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; include="all|non-lazy"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (3)</div>
<div>/&gt;</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;cache&gt;元素的属性说明如表14.2所示。</div>
<div align="center">表14.2&nbsp;&nbsp;&nbsp; &lt;cache&gt;元素的属性说明</div>
<table style="BORDER-TOP-STYLE: none; BORDER-RIGHT-STYLE: none; BORDER-LEFT-STYLE: none; BORDER-COLLAPSE: collapse; BORDER-BOTTOM-STYLE: none" cellspacing="0" cellpadding="0" border="1">
    <tbody>
        <tr>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: windowtext 1pt solid; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: windowtext 1pt solid; WIDTH: 32.4pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" valign="top" width="43">
            <div>序号</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: windowtext 1pt solid; PADDING-LEFT: 5.4pt; BORDER-LEFT-WIDTH: 1pt; BORDER-LEFT-COLOR: windowtext; PADDING-BOTTOM: 0cm; WIDTH: 50.75pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" valign="top" width="68">
            <div>属性</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: windowtext 1pt solid; PADDING-LEFT: 5.4pt; BORDER-LEFT-WIDTH: 1pt; BORDER-LEFT-COLOR: windowtext; PADDING-BOTTOM: 0cm; WIDTH: 219.25pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" valign="top" width="292">
            <div>含义和作用</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: windowtext 1pt solid; PADDING-LEFT: 5.4pt; BORDER-LEFT-WIDTH: 1pt; BORDER-LEFT-COLOR: windowtext; PADDING-BOTTOM: 0cm; WIDTH: 40.8pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" valign="top" width="54">
            <div>必须</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: windowtext 1pt solid; PADDING-LEFT: 5.4pt; BORDER-LEFT-WIDTH: 1pt; BORDER-LEFT-COLOR: windowtext; PADDING-BOTTOM: 0cm; WIDTH: 51.3pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" valign="top" width="68">
            <div>默认值</div>
            </td>
        </tr>
        <tr>
            <td style="BORDER-TOP-WIDTH: 1pt; BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: windowtext 1pt solid; WIDTH: 32.4pt; BORDER-TOP-COLOR: windowtext; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" valign="top" width="43">
            <div>(1)</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; WIDTH: 50.75pt; BORDER-TOP-STYLE: none; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT-STYLE: none" valign="top" width="68">
            <div>usage</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; WIDTH: 219.25pt; BORDER-TOP-STYLE: none; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT-STYLE: none" valign="top" width="292">
            <div>指定缓存策略，可选的策略包括：transactional，read-write，nonstrict-read-write或read-only</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; WIDTH: 40.8pt; BORDER-TOP-STYLE: none; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT-STYLE: none" valign="top" width="54">
            <div>Y</div>
            </td>
        </tr>
        <tr>
            <td style="BORDER-TOP-WIDTH: 1pt; BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: windowtext 1pt solid; WIDTH: 32.4pt; BORDER-TOP-COLOR: windowtext; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" valign="top" width="43">
            <div>(2)</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; WIDTH: 50.75pt; BORDER-TOP-STYLE: none; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT-STYLE: none" valign="top" width="68">
            <div>region</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; WIDTH: 219.25pt; BORDER-TOP-STYLE: none; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT-STYLE: none" valign="top" width="292">
            <div>指定二级缓存区域名</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; WIDTH: 40.8pt; BORDER-TOP-STYLE: none; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT-STYLE: none" valign="top" width="54">
            <div>N</div>
            </td>
        </tr>
        <tr>
            <td style="BORDER-TOP-WIDTH: 1pt; BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: windowtext 1pt solid; WIDTH: 32.4pt; BORDER-TOP-COLOR: windowtext; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" valign="top" width="43">
            <div>(3)</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; WIDTH: 50.75pt; BORDER-TOP-STYLE: none; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT-STYLE: none" valign="top" width="68">
            <div>include</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; WIDTH: 219.25pt; BORDER-TOP-STYLE: none; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT-STYLE: none" valign="top" width="292">
            <div>指定是否缓存延迟加载的对象。all，表示缓存所有对象；non-lazy，表示不缓存延迟加载的对象</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; WIDTH: 40.8pt; BORDER-TOP-STYLE: none; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT-STYLE: none" valign="top" width="54">
            <div>N</div>
            </td>
            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; WIDTH: 51.3pt; BORDER-TOP-STYLE: none; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; BORDER-LEFT-STYLE: none" valign="top" width="68">
            <div>all</div>
            </td>
        </tr>
    </tbody>
</table>
<div><strong><font size="3">14.2.3.5&nbsp;&nbsp;&nbsp; 二级缓存的策略</font></strong></div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 当多个并发的事务同时访问持久化层的缓存中的相同数据时，会引起并发问题，必须采用必要的事务隔离措施。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在进程范围或集群范围的缓存，即第二级缓存，会出现并发问题。因此可以设定以下4种类型的并发访问策略，每一种策略对应一种事务隔离级别。</div>
<div style="MARGIN-LEFT: 42pt; TEXT-INDENT: -21pt">●&nbsp;&nbsp; 只读缓存（read-only）</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如果应用程序需要读取一个持久化类的实例，但是并不打算修改它们，可以使用read-only缓存。这是最简单，也是实用性最好的策略。</div>
<div>对于从来不会修改的数据，如参考数据，可以使用这种并发访问策略。</div>
<div style="MARGIN-LEFT: 42pt; TEXT-INDENT: -21pt">●&nbsp;&nbsp; 读/写缓存（read-write）</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如果应用程序需要更新数据，可能read-write缓存比较合适。如果需要序列化事务隔离级别，那么就不能使用这种缓存策略。</div>
<div>对于经常被读但很少修改的数据，可以采用这种隔离类型，因为它可以防止脏读这类的并发问题。</div>
<div style="MARGIN-LEFT: 42pt; TEXT-INDENT: -21pt">●&nbsp;&nbsp; 不严格的读/写缓存（nonstrict-read-write）</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如果程序偶尔需要更新数据（也就是说，出现两个事务同时更新同一个条目的现象很不常见），也不需要十分严格的事务隔离，可能适用nonstrict-read-write缓存。</div>
<div>对于极少被修改，并且允许偶尔脏读的数据，可以采用这种并发访问策略。</div>
<div style="MARGIN-LEFT: 42pt; TEXT-INDENT: -21pt">●&nbsp;&nbsp; 事务缓存（transactional）</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; transactional缓存策略提供了对全事务的缓存，仅仅在受管理环境中使用。它提供了Repeatable Read事务隔离级别。对于经常被读但很少修改的数据，可以采用这种隔离类型，因为它可以防止脏读和不可重复读这类的并发问题。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在上面所介绍的隔离级别中，事务型并发访问策略的隔离级别最高，然后依次是读/写型和不严格读写型，只读型的隔离级别最低。事务的隔离级别越高，并发性能就越低。</div>
<div><strong><font size="3">14.2.3.6&nbsp;&nbsp;&nbsp; 在开发中使用二级缓存</font></strong></div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在这一部分中，将细致地介绍如何在Hibernate中使用二级缓存。在这里所使用的二级缓存组件为EHCache。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 关于EHCache的详细信息请参考http://ehcache.sourceforge.net上的内容。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在Hibernate中使用二级缓存需要经历以下步骤：</div>
<div style="MARGIN-LEFT: 42pt; TEXT-INDENT: -21pt">●&nbsp;&nbsp; 在Hibernate配置文件（通常为hibernate.cfg.xml）中，设置二级缓存的提供者类。</div>
<div style="MARGIN-LEFT: 42pt; TEXT-INDENT: -21pt">●&nbsp;&nbsp; 配置EHCache的基本参数。</div>
<div style="MARGIN-LEFT: 42pt; TEXT-INDENT: -21pt">●&nbsp;&nbsp; 在需要进行缓存的实体对象的映射文件中配置缓存的策略。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 下面就来逐步演示一下如何在开发中使用Hibernate的二级缓存。</div>
<div><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </strong><strong>修改Hibernate</strong><strong>的配置文件</strong></div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在使用Hibernate的二级缓存时，需要在Hibernate的配置文件中指定缓存提供者对象，以便于Hibernate可以通过其实现对数据的缓存处理。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在这里需要设置的参数是hibernate.cache.provider_class，在使用EHCache时，需要将其值设置为org.hibernate.cache.EhCacheProvider。具体要增加的配置如下所示：</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property name="hibernate.cache.provider_class"&gt;</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; org.hibernate.cache.EhCacheProvider&lt;/property&gt;</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hibernate配置文件的详细内容请参考配套光盘中的hibernate/src/cn/hxex/ hibernate/cache/hibernate.cfg.xml文件。</div>
<div><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </strong><strong>增加EHCache</strong><strong>配置参数</strong></div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在默认情况下，EHCache会到classpath所指定的路径中寻找ehcache.xml文件来作为EHCache的配置文件。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在配置文件中，包含了EHCache进行缓存管理时的一些基本的参数。具体的配置方法如清单14.9所示。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 清单14.9&nbsp;&nbsp;&nbsp; EHCache的配置</div>
<div>&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div>
<div>&lt;ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" </div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xsi:noNamespaceSchemaLocation="ehcache.xsd"&gt;</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;diskStore path="java.io.tmpdir" /&gt;</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;defaultCache </div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; maxElementsInMemory="10000" </div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; eternal="false" </div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; timeToIdleSeconds="120" </div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; timeToLiveSeconds="120" </div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; overflowToDisk="true" </div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; diskPersistent="false" </div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; diskExpiryThreadIntervalSeconds="120" </div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; memoryStoreEvictionPolicy="LRU" /&gt;</div>
<div>&lt;/ehcache&gt;</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在这里只是使用EHCache所提供的默认配置文件进行了EHCache的基本配置，对于这些参数的详细含义请参考其官方网站（http://ehcache.sourceforge.net/）中的资料。在实际的开发中，应该依据自己的具体情况来设置这些参数的值。</div>
<div><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </strong><strong>开发实体对象</strong></div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这里所使用的是一个非常简单的User对象，它只包含了ID，name和age三个属性，具体的实现方法请参见配套光盘中的hibernate/src/cn/hxex/cache/User.java文件。</div>
<div><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </strong><strong>配置映射文件</strong></div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 映射文件的配置与不使用二级缓存的Java对象的区别就在于需要增加前面所介绍的&lt;cache&gt;元素来配置此对象的缓存策略。在这里所使用的缓存策略为“read-write”。所以，应该在映射文件中增加如下的配置：</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;cache usage="read-write"/&gt;</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 映射文件的详细配置请参考配套光盘中的hibernate/src/cn/hxex/cache/User.hbm.xml文件。</div>
<div><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </strong><strong>测试主程序</strong></div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在这里的测试主程序采用了多线程的运行方式，以模拟在不同Session的情况下是否真的可以避免查询的重复进行。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在这个测试程序中，所做的工作就是依据ID来得到对应的实体对象，并将其输出。然后通过多次运行此程序，来检查后面的运行是否进行了数据库的操作。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 测试主程序的主要测试方法的实现如清单14.10所示。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 清单14.10&nbsp;&nbsp;&nbsp; 测试主程序的实现</div>
<div>……</div>
<div>&nbsp;&nbsp;&nbsp; public void run() {</div>
<div>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SessionFactory sf = CacheMain.getSessionFactory();</div>
<div>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Session session = sf.getCurrentSession();</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; session.beginTransaction();
<div>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </div>
<div>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; User user = (User)session.get( User.class, "1" );</div>
<div>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println( user );</div>
<div>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </div>
<div>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; session.getTransaction().commit();</div>
<div>}</div>
<div>&nbsp;&nbsp;&nbsp; </div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void main(String[] args) {</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CacheMain main1 = new CacheMain();</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; main1.start();</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CacheMain main2 = new CacheMain();</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; main2.start();</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</div>
<div>}</div>
<div><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </strong><strong>运行测试程序</strong></div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在运行测试程序之前，需要先手动地向数据库中增加一条记录。该记录的ID值为1，可以采用下面的SQL语句。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; INSERT INTO userinfo(userId, name, age) VALUES( '1', 'galaxy', 32 );</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 接下来在运行测试主程序时，应该看到类似下面的输出：</div>
<div>Hibernate: select user0_.userId as userId0_0_, user0_.name as name0_0_, user0_.age as age0_0_ from USERINFO user0_ where user0_.userId=?</div>
<div>ID:&nbsp; 1</div>
<div>Namge:&nbsp;&nbsp; galaxy</div>
<div>Age:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 32</div>
<div>ID:&nbsp; 1</div>
<div>Namge:&nbsp;&nbsp; galaxy</div>
<div>Age:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 32</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 通过上面的结果可以看到，每个运行的进程都输出了User对象的信息，但在运行中只进行了一次数据库读取操作，这说明第二次User对象的获得是从缓存中抓取的，而没有进行数据库的查询操作。</div>
<div><strong><font size="3">14.2.3.7&nbsp;&nbsp;&nbsp; 查询缓存</font></strong></div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 查询缓存是专门针对各种查询操作进行缓存。查询缓存会在整个SessionFactory的生命周期中起作用，存储的方式也是采用key-value的形式来进行存储的。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 查询缓存中的key是根据查询的语句、查询的条件、查询的参数和查询的页数等信息组成的。而数据的存储则会使用两种方式，使用SELECT语句只查询实体对象的某些列或者某些实体对象列的组合时，会直接缓存整个结果集。而对于查询结果为某个实体对象集合的情况则只会缓存实体对象的ID值，以达到缓存空间可以共用，节省空间的目的。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在使用查询缓存时，除了需要设置hibernate.cache.provider_class参数来启动二级缓存外，还需要通过hibernate.cache.use_query_cache参数来启动对查询缓存的支持。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 另外需要注意的是，查询缓存是在执行查询语句的时候指定缓存的方式以及是否需要对查询的结果进行缓存。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 下面就来了解一下查询缓存的使用方法及作用。</div>
<div><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </strong><strong>修改Hibernate</strong><strong>配置文件</strong></div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 首先需要修改Hibernate的配置文件，增加hibernate.cache.use_query_cache参数的配置。配置方法如下：</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property name="hibernate.cache.use_query_cache"&gt;true&lt;/property&gt;</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hibernate配置文件的详细内容请参考配套光盘中的hibernate/src/cn/hxex/ hibernate/cache/hibernate.cfg.xml文件。</div>
<div><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </strong><strong>编写主测试程序</strong></div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 由于这是在前面二级缓存例子的基础上来开发的，所以，对于EHCache的配置以及视图对象的开发和映射文件的配置工作就都不需要再重新进行了。下面就来看一下主测试程序的实现方法，如清单14.11所示。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 清单14.11&nbsp;&nbsp;&nbsp; 主程序的实现</div>
<div>……</div>
<div>&nbsp;&nbsp;&nbsp; public void run() {</div>
<div>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SessionFactory sf = QueryCacheMain.getSessionFactory();</div>
<div>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Session session = sf.getCurrentSession();</div>
<div>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </div>
<div>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; session.beginTransaction();</div>
<div>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </div>
<div>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Query query = session.createQuery( "from User" );</div>
<div>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Iterator it = query.setCacheable( true ).list().iterator();</div>
<div>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while( it.hasNext() ) {</div>
<div>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println( it.next() );</div>
<div>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</div>
<div>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </div>
<div>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; User user = (User)session.get( User.class, "1" );</div>
<div>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println( user );</div>
<div>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </div>
<div>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; session.getTransaction().commit();</div>
<div>&nbsp;&nbsp;&nbsp; }</div>
<div>&nbsp;&nbsp;&nbsp; </div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void main(String[] args) {</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; QueryCacheMain main1 = new QueryCacheMain();</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; main1.start();</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thread.sleep( 2000 );</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch (InterruptedException e) {</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e.printStackTrace();</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; QueryCacheMain main2 = new QueryCacheMain();</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; main2.start();</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</div>
<div>}</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 主程序在实现的时候采用了多线程的方式来运行。首先将“from User”查询结果进行缓存，然后再通过ID取得对象来检查是否对对象进行了缓存。另外，多个线程的执行可以看出对于进行了缓存的查询是不会执行第二次的。</div>
<div><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </strong><strong>运行测试主程序</strong></div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 接着就来运行测试主程序，其输出结果应该如下所示：</div>
<div>Hibernate: select user0_.userId as userId0_, user0_.name as name0_, user0_.age as age0_ from USERINFO user0_</div>
<div>ID:&nbsp; 1</div>
<div>Namge:&nbsp;&nbsp; galaxy</div>
<div>Age:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 32</div>
<div>ID:&nbsp; 1</div>
<div>Namge:&nbsp;&nbsp; galaxy</div>
<div>Age:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 32</div>
<div>ID:&nbsp; 1</div>
<div>Namge:&nbsp;&nbsp; galaxy</div>
<div>Age:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 32</div>
<div>ID:&nbsp; 1</div>
<div>Namge:&nbsp;&nbsp; galaxy</div>
<div>Age:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 32</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 通过上面的执行结果可以看到，在两个线程执行中，只执行了一个SQL查询语句。这是因为根据ID所要获取的对象在前面的查询中已经得到了，并进行了缓存，所以没有再次执行查询语句。</div>
<div>
<div><strong><font size="4">14.2.4&nbsp;&nbsp;&nbsp; Hibernate查询方法与缓存的关系</font></strong></div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在前面介绍了Hibernate的缓存技术以及基本的用法，在这里就具体的Hibernate所提供的查询方法与Hibernate缓存之间的关系做一个简单的总结。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在开发中，通常是通过两种方式来执行对数据库的查询操作的。一种方式是通过ID来获得单独的Java对象，另一种方式是通过HQL语句来执行对数据库的查询操作。下面就分别结合这两种查询方式来说明一下缓存的作用。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 通过ID来获得Java对象可以直接使用Session对象的load()或者get()方法，这两种方式的区别就在于对缓存的使用上。</div>
<div style="MARGIN-LEFT: 48pt; TEXT-INDENT: -21pt">●&nbsp;&nbsp; load()方法</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在使用了二级缓存的情况下，使用load()方法会在二级缓存中查找指定的对象是否存在。</div>
<div>在执行load()方法时，Hibernate首先从当前Session的一级缓存中获取ID对应的值，在获取不到的情况下，将根据该对象是否配置了二级缓存来做相应的处理。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如配置了二级缓存，则从二级缓存中获取ID对应的值，如仍然获取不到则还需要根据是否配置了延迟加载来决定如何执行，如未配置延迟加载则从数据库中直接获取。在从数据库获取到数据的情况下，Hibernate会相应地填充一级缓存和二级缓存，如配置了延迟加载则直接返回一个代理类，只有在触发代理类的调用时才进行数据库的查询操作。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在Session一直打开的情况下，并在该对象具有单向关联维护的时候，需要使用类似Session.clear()，Session.evict()的方法来强制刷新一级缓存。</div>
<div style="MARGIN-LEFT: 48pt; TEXT-INDENT: -21pt">●&nbsp;&nbsp; get()方法</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get()方法与load()方法的区别就在于不会查找二级缓存。在当前Session的一级缓存中获取不到指定的对象时，会直接执行查询语句从数据库中获得所需要的数据。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在Hibernate中，可以通过HQL来执行对数据库的查询操作。具体的查询是由Query对象的list()和iterator()方法来执行的。这两个方法在执行查询时的处理方法存在着一定的差别，在开发中应该依据具体的情况来选择合适的方法。</div>
<div style="MARGIN-LEFT: 48pt; TEXT-INDENT: -21pt">●&nbsp;&nbsp; list()方法</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在执行Query的list()方法时，Hibernate的做法是首先检查是否配置了查询缓存，如配置了则从查询缓存中寻找是否已经对该查询进行了缓存，如获取不到则从数据库中进行获取。从数据库中获取到后，Hibernate将会相应地填充一级、二级和查询缓存。如获取到的为直接的结果集，则直接返回，如获取到的为一些ID的值，则再根据ID获取相应的值（Session.load()），最后形成结果集返回。可以看到，在这样的情况下，list()方法也是有可能造成N次查询的。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 查询缓存在数据发生任何变化的情况下都会被自动清空。</div>
<div style="MARGIN-LEFT: 48pt; TEXT-INDENT: -21pt">●&nbsp;&nbsp; iterator()方法</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Query的iterator()方法处理查询的方式与list()方法是不同的，它首先会使用查询语句得到ID值的列表，然后再使用Session的load()方法得到所需要的对象的值。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在获取数据的时候，应该依据这4种获取数据方式的特点来选择合适的方法。在开发中可以通过设置show_sql选项来输出Hibernate所执行的SQL语句，以此来了解Hibernate是如何操作数据库的</div>
<div>
<div><strong><font size="4">14.3&nbsp;&nbsp;&nbsp; Hibernate的性能优化</font></strong></div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hibernate是对JDBC的轻量级封装，因此在很多情况下Hibernate的性能比直接使用JDBC存取数据库要低。然而，通过正确的方法和策略，在使用Hibernate的时候还是可以非常接近直接使用JDBC时的效率的，并且，在有些情况下还有可能高于使用JDBC时的执行效率。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在进行Hibernate性能优化时，需要从以下几个方面进行考虑：</div>
<div style="MARGIN-LEFT: 48pt; TEXT-INDENT: -21pt">●&nbsp;&nbsp; 数据库设计调整。</div>
<div style="MARGIN-LEFT: 48pt; TEXT-INDENT: -21pt">●&nbsp;&nbsp; HQL优化。</div>
<div style="MARGIN-LEFT: 48pt; TEXT-INDENT: -21pt">●&nbsp;&nbsp; API的正确使用（如根据不同的业务类型选用不同的集合及查询API）。</div>
<div style="MARGIN-LEFT: 48pt; TEXT-INDENT: -21pt">●&nbsp;&nbsp; 主配置参数（日志、查询缓存、fetch_size、batch_size等）。</div>
<div style="MARGIN-LEFT: 48pt; TEXT-INDENT: -21pt">●&nbsp;&nbsp; 映射文件优化（ID生成策略、二级缓存、延迟加载、关联优化）。</div>
<div style="MARGIN-LEFT: 48pt; TEXT-INDENT: -21pt">●&nbsp;&nbsp; 一级缓存的管理。</div>
<div style="MARGIN-LEFT: 48pt; TEXT-INDENT: -21pt">●&nbsp;&nbsp; 针对二级缓存，还有许多特有的策略。</div>
<div style="MARGIN-LEFT: 48pt; TEXT-INDENT: -21pt">●&nbsp;&nbsp; 事务控制策略。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 数据的查询性能往往是影响一个应用系统性能的主要因素。对查询性能的影响会涉及到系统软件开发的各个阶段，例如，良好的设计、正确的查询方法、适当的缓存都有利于系统性能的提升。</div>
<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 系统性能的提升设计到系统中的各个方面，是一个相互平衡的过程，需要在应用的各个阶段都要考虑。并且在开发、运行的过程中要不断地调整和优化才能逐步提升系统的性能。</div>
</div>
</div>
</div>
</div>
<!-- page --></div>
<!-- page -->
</div>
<div class="share_buttons" id="sharePanel"><span>分享到：</span> <a name="sina" class="share_sina" title="分享到新浪微博"></a><a name="qq" class="share_qq" title="分享到腾讯微博"></a></div>
<!--192.168.1.237-->
<div class="article_next_prev">
    <li class="prev_article"><span>上一篇：</span><a href="http://blog.csdn.net/accpsz/article/details/2458667">Eclipse中常用的快捷键(最经典的快捷键,就不用多说了)</a></li>
    <li class="next_article"><span>下一篇：</span><a href="http://blog.csdn.net/accpsz/article/details/2458812">Struts,Hibernate,Spring集成开发宝典 </a></li>
</div>


    
</div>
<div id="ad_cen"><iframe id="ad_frm_0" frameborder="0" scrolling="no" style="border-width: 0px; overflow: hidden; width: 732px; height: 92px;" src="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/ad(1).htm"></iframe></div>
<script type="text/javascript">
    new Ad(4, 'ad_cen');
</script>
<div id="comment_title" class="panel_head">查看评论<a name="comments"></a></div>
<div id="comment_list"><br>&nbsp;&nbsp;暂无评论<br><br><div class="clear"></div></div>
<div id="comment_bar"></div>
<div id="comment_form"><div class="guest_link">您还没有登录,请<a href="http://passport.csdn.net/account/login?from=http%3A%2F%2Fblog.csdn.net%2Faccpsz%2Farticle%2Fdetails%2F2458791">[登录]</a>或<a href="http://passport.csdn.net/account/register?from=http%3A%2F%2Fblog.csdn.net%2Faccpsz%2Farticle%2Fdetails%2F2458791">[注册]</a></div></div>
<div class="announce">* 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场<a name="reply"></a><a name="quote"></a></div>
<script type="text/javascript">
    var fileName = '2458791';
    var commentscount = 0;
    var islock = false
</script>
<script type="text/javascript" src="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/comment.js"></script>
<div id="ad_bot"><iframe id="ad_frm_1" frameborder="0" scrolling="no" style="border-width: 0px; overflow: hidden; width: 732px; height: 170px;" src="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/ad(2).htm"></iframe></div>
<script type="text/javascript">
    new Ad(5, 'ad_bot');
</script>
<div id="report_dialog"></div>

<div id="d-top">
<a href="http://blog.csdn.net/accpsz/article/details/2458791#" onclick="javascript:document.body.scrollTop=0;document.documentElement.scrollTop=0;this.blur();return false;" title="回到顶部">
<img src="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/top.png" alt="TOP"></a>
</div>



<div class="clear"></div>
</div>
</div>

<div id="side">
<div class="side">
<div id="panel_Profile" class="panel">
    <ul class="panel_head"><span>个人资料</span></ul>
    <ul class="panel_body profile">
        <div id="blog_userface">
            <a href="http://my.csdn.net/accpsz" target="_blank">
            <img src="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/1_accpsz.jpg" title="访问我的空间" style="max-width:90%">
            </a>
            <br>
            <span><a href="http://my.csdn.net/accpsz" target="_blank">accpsz</a></span>
        </div>
<div class="interact">
<!--<a href="#" class="attented" title="已关注"></a>-->
<a href="http://blog.csdn.net/accpsz/article/details/2458791#" class="attent" id="span_add_follow" title="[加关注]"></a>
<a href="http://my.csdn.net/my/letter/send/accpsz" class="letter" title="[发私信]"></a>
</div>
        <div id="blog_medal">
        <div id="bms_box"></div></div>
        <ul id="blog_rank">
            <li>访问：<span>92148次</span></li>
            <li>积分：<span>1879分</span></li>
            <li>排名：<span>第3453名</span></li>
        </ul>
        <ul id="blog_statistics">
            <li>原创：<span>74篇</span></li>
            <li>转载：<span>112篇</span></li>
            <li>译文：<span>0篇</span></li>
            <li>评论：<span>29条</span></li>
        </ul>
    </ul>
</div>
<script type="text/javascript">
    var _blogger = 'accpsz';
</script>
<script type="text/javascript">
$(document).ready(function () {
    var un = getUN().toLowerCase();
    if (un == _blogger.toLowerCase()) {
        $('.interact').hide();
    } else if(un) {
        var url = "http://my.csdn.net/index.php/follow/check_is_followed/" + encodeURIComponent(un) + "/" + encodeURIComponent(_blogger) + "?jsonpcallback=?";
        $.getJSON(url, {}, function (data) {
            if (data.succ == 1 && data.info == 1) {
                $('#span_add_follow').attr('class', 'attented');
            } else {
                $('#span_add_follow').click(guanzhu);
            }
        }, 'json');
    }
});
function guanzhu() {
    var url = "http://my.csdn.net/index.php/follow/do_follow?jsonpcallback=?";
    $.getJSON(url, { "username": _blogger }, function (data) {
        if (data.succ == 1) {
            alert('关注成功！');
            $('#span_add_follow').attr('class', 'attented').click(function () { return false; });
        } else {
            alert(data.msg);
        }
    });
    return false;
}
function getUN() {
    var m = document.cookie.match(new RegExp("(^| )UserName=([^;]*)(;|$)"));
    if (m) return m[2];
    else return '';
}
</script>

<div class="panel" id="panel_Search">
    <ul class="panel_head"><span>文章搜索</span></ul>
    <ul class="panel_body">
        <form id="frmSearch" action="http://so.csdn.net/search" class="form_search" target="_blank">
        <span><input id="inputSearch" type="text" class="blogsearch" title="请输入关键字"></span>
        <input id="btnSubmit" type="submit" value="搜索" title="search in blog">
        <input type="hidden" name="q" id="inputQ">
        <input type="hidden" name="t" value="blog">
        <a id="btnSearchBlog" target="_blank"></a>
        </form>
    </ul>
</div><div id="panel_Category" class="panel">
    <ul class="panel_head"><span>文章分类</span></ul>
    <ul class="panel_body">
        <li>
        <a href="http://blog.csdn.net/accpsz/article/category/354927">Acegi</a><span>(0)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/accpsz/article/category/348641">AJAX</a><span>(0)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/accpsz/article/category/244697">hibernate学习</a><span>(12)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/accpsz/article/category/380785">javaScript</a><span>(3)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/accpsz/article/category/141571">JAVA基础</a><span>(42)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/accpsz/article/category/424519">jmail</a><span>(2)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/accpsz/article/category/380791">JS+DIV+CSS</a><span>(5)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/accpsz/article/category/475361">jstl</a><span>(3)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/accpsz/article/category/348639">LINUX学习</a><span>(4)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/accpsz/article/category/416544">oracle</a><span>(17)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/accpsz/article/category/172351">Spring学习</a><span>(17)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/accpsz/article/category/382346">Struts2</a><span>(6)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/accpsz/article/category/617518">tomcat</a><span>(5)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/accpsz/article/category/382451">UML</a><span>(4)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/accpsz/article/category/410337">VSS</a><span>(1)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/accpsz/article/category/545284">web service</a><span>(2)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/accpsz/article/category/576869">Weblogic</a><span>(1)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/accpsz/article/category/531491">工作流</a><span>(0)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/accpsz/article/category/780504">建站技术</a><span>(2)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/accpsz/article/category/172344">生活随想</a><span>(4)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/accpsz/article/category/315518">电脑网络</a><span>(4)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/accpsz/article/category/480967">设计模式</a><span>(2)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/accpsz/article/category/396327">连接池</a><span>(6)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/accpsz/article/category/389684">项目管理</a><span>(13)</span>
        </li>
    </ul>
</div><div id="panel_Archive" class="panel">
    <ul class="panel_head"><span>文章存档</span></ul>
    <ul class="panel_body">
        <div id="archive_list"><li><a href="http://blog.csdn.net/accpsz/article/month/2012/01">2012年01月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2011/09">2011年09月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2011/06">2011年06月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2011/02">2011年02月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2011/01">2011年01月</a><span>(8)</span></li><span class="hidelist" style="display:none;"><li><a href="http://blog.csdn.net/accpsz/article/month/2010/12">2010年12月</a><span>(5)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2010/11">2010年11月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2010/07">2010年07月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2010/05">2010年05月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2010/03">2010年03月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2010/01">2010年01月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2009/11">2009年11月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2009/10">2009年10月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2009/09">2009年09月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2009/08">2009年08月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2009/06">2009年06月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2009/05">2009年05月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2009/04">2009年04月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2009/03">2009年03月</a><span>(5)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2008/11">2008年11月</a><span>(13)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2008/10">2008年10月</a><span>(7)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2008/08">2008年08月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2008/07">2008年07月</a><span>(9)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2008/06">2008年06月</a><span>(15)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2008/05">2008年05月</a><span>(51)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2008/04">2008年04月</a><span>(21)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2008/02">2008年02月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2007/12">2007年12月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2007/11">2007年11月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2007/09">2007年09月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2007/06">2007年06月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2006/10">2006年10月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2006/06">2006年06月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2006/05">2006年05月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2006/03">2006年03月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2005/11">2005年11月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2005/10">2005年10月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/accpsz/article/month/2005/09">2005年09月</a><span>(3)</span></li></span><div id="archive_list_button" class="list_closed">展开</div></div>
    </ul>
</div>
<div id="hotarticls" class="panel">
    <ul class="panel_head"><span>阅读排行</span></ul>
    <ul class="panel_body itemlist">
        <li>
            <a href="http://blog.csdn.net/accpsz/article/details/2588879" title="用命令行创建Oracle表空间、用户及权限的分配">用命令行创建Oracle表空间、用户及权限的分配</a><span>(8389)</span>
        </li>
        <li>
            <a href="http://blog.csdn.net/accpsz/article/details/3115657" title="JSTL fmt:formatNumber 数字、货币格式化">JSTL fmt:formatNumber 数字、货币格式化</a><span>(3377)</span>
        </li>
        <li>
            <a href="http://blog.csdn.net/accpsz/article/details/3091097" title="java list用法,去除字符串数组中重复值 ">java list用法,去除字符串数组中重复值 </a><span>(3306)</span>
        </li>
        <li>
            <a href="http://blog.csdn.net/accpsz/article/details/2634972" title="JS的split用法2">JS的split用法2</a><span>(2824)</span>
        </li>
        <li>
            <a href="http://blog.csdn.net/accpsz/article/details/2578046" title=" Oracle alter table "> Oracle alter table </a><span>(2598)</span>
        </li>
        <li>
            <a href="http://blog.csdn.net/accpsz/article/details/2458639" title="在spring+hibernate中以dataSource方式使用proxool连接池">在spring+hibernate中以dataSource方式使用proxool连接池</a><span>(2357)</span>
        </li>
        <li>
            <a href="http://blog.csdn.net/accpsz/article/details/2649980" title="JProfile配置">JProfile配置</a><span>(2295)</span>
        </li>
        <li>
            <a href="http://blog.csdn.net/accpsz/article/details/3115660" title="jstl日期格式化">jstl日期格式化</a><span>(2251)</span>
        </li>
        <li>
            <a href="http://blog.csdn.net/accpsz/article/details/2553659" title="Spring MVC与struts比较">Spring MVC与struts比较</a><span>(2218)</span>
        </li>
        <li>
            <a href="http://blog.csdn.net/accpsz/article/details/5155614" title="ORACLE统计信息 ">ORACLE统计信息 </a><span>(1850)</span>
        </li>
    </ul>
</div>
<div id="hotarticls2" class="panel">
    <ul class="panel_head"><span>评论排行</span></ul>
    <ul class="panel_body itemlist">
        <li>
            <a href="http://blog.csdn.net/accpsz/article/details/2634972" title="JS的split用法2">JS的split用法2</a><span>(3)</span>
        </li>
        <li>
            <a href="http://blog.csdn.net/accpsz/article/details/5155614" title="ORACLE统计信息 ">ORACLE统计信息 </a><span>(3)</span>
        </li>
        <li>
            <a href="http://blog.csdn.net/accpsz/article/details/2311823" title="js循环表单验证,不能为空,和一定要输入数字">js循环表单验证,不能为空,和一定要输入数字</a><span>(3)</span>
        </li>
        <li>
            <a href="http://blog.csdn.net/accpsz/article/details/2588879" title="用命令行创建Oracle表空间、用户及权限的分配">用命令行创建Oracle表空间、用户及权限的分配</a><span>(2)</span>
        </li>
        <li>
            <a href="http://blog.csdn.net/accpsz/article/details/478354" title="eclipse插件集">eclipse插件集</a><span>(2)</span>
        </li>
        <li>
            <a href="http://blog.csdn.net/accpsz/article/details/3219467" title="Oracle里DUAL表是什么表？">Oracle里DUAL表是什么表？</a><span>(2)</span>
        </li>
        <li>
            <a href="http://blog.csdn.net/accpsz/article/details/2649980" title="JProfile配置">JProfile配置</a><span>(1)</span>
        </li>
        <li>
            <a href="http://blog.csdn.net/accpsz/article/details/2634986" title="JS验证邮件地址">JS验证邮件地址</a><span>(1)</span>
        </li>
        <li>
            <a href="http://blog.csdn.net/accpsz/article/details/2691634" title="POI学习总结1">POI学习总结1</a><span>(1)</span>
        </li>
        <li>
            <a href="http://blog.csdn.net/accpsz/article/details/2326599" title="在线QQ,在线MSN的生成">在线QQ,在线MSN的生成</a><span>(1)</span>
        </li>
    </ul>
</div>
<div id="homepageArticles" class="panel">
    <ul class="panel_head"><span>推荐文章</span></ul>
    <ul class="panel_body" id="ad_commend">
    <iframe id="ad_frm_2" frameborder="0" scrolling="no" style="border-width: 0px; overflow: hidden; width: 182px; height: 236px;" src="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/ad.htm"></iframe></ul>
</div>
<script type="text/javascript">
    new Ad(12, 'ad_commend');
</script><div id="newcomments" class="panel">
<ul class="panel_head"><span>最新评论</span></ul>
<ul class="panel_body itemlist">
    <li>
    <a href="http://blog.csdn.net/accpsz/article/details/3247254#comments">详细解析Java中抽象类和接口的区别</a>
    <p style="margin:0px;">niaotuo:
真是受益匪浅
    </p>
    </li>
    <li>
    <a href="http://blog.csdn.net/accpsz/article/details/6108917#comments">struts2源码分析</a>
    <p style="margin:0px;">wouhuh198343:
谢谢楼主，分享学习心得！
    </p>
    </li>
    <li>
    <a href="http://blog.csdn.net/accpsz/article/details/3219467#comments">Oracle里DUAL表是什么表？</a>
    <p style="margin:0px;">lanyu1986:

    </p>
    </li>
    <li>
    <a href="http://blog.csdn.net/accpsz/article/details/3276465#comments">JSTL标签的用法 </a>
    <p style="margin:0px;">sdsdwqwew:

    </p>
    </li>
    <li>
    <a href="http://blog.csdn.net/accpsz/article/details/3091097#comments">java list用法,去除字符串数组中重复值 </a>
    <p style="margin:0px;">demon_w:
list.add(&amp;quot;这是中文&amp;quot;)；会有乱码我从txt文件中读入中文 再用add添...
    </p>
    </li>
    <li>
    <a href="http://blog.csdn.net/accpsz/article/details/2649980#comments">JProfile配置</a>
    <p style="margin:0px;">onlylh:
写的犀利 学习了 呵呵楼主能不能教我一个方法 我想得到的是每条边被读取的数据 而不是那种图 楼主有办...
    </p>
    </li>
    <li>
    <a href="http://blog.csdn.net/accpsz/article/details/3219467#comments">Oracle里DUAL表是什么表？</a>
    <p style="margin:0px;">lpioneer:

    </p>
    </li>
    <li>
    <a href="http://blog.csdn.net/accpsz/article/details/2588879#comments">用命令行创建Oracle表空间、用户及权限的分配</a>
    <p style="margin:0px;">di_mimi2004:

    </p>
    </li>
    <li>
    <a href="http://blog.csdn.net/accpsz/article/details/2311823#comments">js循环表单验证,不能为空,和一定要输入数字</a>
    <p style="margin:0px;">匿名用户:
多谢
    </p>
    </li>
    <li>
    <a href="http://blog.csdn.net/accpsz/article/details/2578046#comments"> Oracle alter table </a>
    <p style="margin:0px;">匿名用户:

    </p>
    </li>
</ul>
</div>
</div>
<div class="clear"></div>
</div>

<div class="clear"></div>
</div>
<script type="text/javascript" src="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/shCore-src.js"></script>
<script type="text/javascript" src="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/ZeroClipboard.js"></script>
<script type="text/javascript" src="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/article_code.js"></script>

<script type="text/javascript" src="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/show.js"></script>
<script type="text/javascript" src="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/showblogmedal.ashx"></script>
<script type="text/javascript">document.write("<img src=http://counter.csdn.net/pv.aspx?id=24 border=0 width=0 height=0>");</script><img src="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/pv.aspx" border="0" width="0" height="0">

<script type="text/javascript" src="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/publib_footer.js"></script><link rel="stylesheet" type="text/css" href="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/pub_footer_2012.css"><div class="pub_footerall"><dl><dt></dt> <dd><a href="http://www.csdn.net/company/about.html" target="_blank">公司简介</a>|<a href="http://www.csdn.net/company/recruit.html" target="_blank">招贤纳士</a>|<a href="http://www.csdn.net/company/marketing.html" target="_blank">广告服务</a>|<a href="http://www.csdn.net/company/account.html" target="_blank">银行汇款帐号</a>|<a href="http://www.csdn.net/company/contact.html" target="_blank">联系方式</a>|<a href="http://www.csdn.net/company/statement.html" target="_blank">版权声明</a>|<a href="http://www.csdn.net/company/layer.html" target="_blank">法律顾问</a>|<a href="mailto:webmaster@csdn.net">问题报告</a></dd><dd>京&nbsp;ICP&nbsp;证&nbsp;070598&nbsp;号</dd><dd>北京创新乐知信息技术有限公司 版权所有</dd><dd><img src="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/ico_email.gif" alt="" title=""> 联系邮箱：webmaster(at)csdn.net</dd><dd>Copyright © 1999-2012, CSDN.NET, All Rights Reserved&nbsp;<a href="http://www.hd315.gov.cn/beian/view.asp?bianhao=010202001032100010" target="_blank"><img src="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/gongshang_logos.gif" alt="GongshangLogo" title=""></a></dd></dl></div>

<script type="text/javascript" src="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/counter.js"></script><script type="text/javascript" charset="UTF-8" src="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/msg.popup.js"></script>

<!--ad.csdn.net-->
<script type="text/javascript" src="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/ad-blog.js"></script><script type="text/javascript" src="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/ad-ibm412.js"></script>




</div>

<iframe style="width: 1px; height: 1px; position: absolute; visibility: hidden;" src="./Hibernate的缓存 - 清水雨潭 - 博客频道 - CSDN.NET_files/ibm-caq4-eis-serverhomepage-960-90-1102.htm"></iframe></body></html>